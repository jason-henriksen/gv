interface GitRepoData {
    host?: string;
    owner?: string;
    project?: string;
    protocol?: string;
    remote?: string;
    repository?: string;
}
declare class RuntimeState {
    name: string;
    latestVersion?: string;
    preMergeVersion?: string;
    private?: boolean;
    publishConfig?: any;
    versionTypesOverRide?: Array<string>;
    versionOverRide?: string;
    versionChoiceDisabled?: boolean;
    prOptionList?: Array<string>;
    major?: number;
    minor?: number;
    patch?: number;
    tagVersion?: number;
    tagTemplate?: string;
    isUpdate?: boolean;
    tagName?: string;
    tagAnnotation?: string;
    pushRepo?: string;
    tagArgs?: Array<string>;
    pushArgs?: Array<string>;
    commitArgs?: Array<string>;
    tagFormat?: string;
    latestTagName?: string;
    secondLatestTagName?: string;
    forceLatestVersion?: string;
    curBranch?: string;
    latestIsPreRelease?: boolean;
    isPreRelease?: boolean;
    preReleaseId?: string;
    changelog?: boolean;
    changelogText?: string;
    commitMessage?: string;
    gitRepoData?: GitRepoData;
    isReleased?: boolean;
    addUntrackedFiles?: boolean;
    tag?: boolean;
    commit?: boolean;
    push?: boolean;
    isCommitted?: boolean;
    isTagged?: boolean;
    gitPreReleaseName?: string;
    gitPreventTagging?: boolean;
    gitForceTagging?: boolean;
    goal?: string;
    task?: string;
    version?: string;
    action?: string;
    incrementNeeded?: boolean;
    latestTag?: string;
    constructor(values?: Partial<RuntimeState>);
    set(values?: Partial<RuntimeState>): void;
    reset(values?: Partial<RuntimeState>): void;
}
export default RuntimeState;
